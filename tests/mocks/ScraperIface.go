// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	olympus "github.com/UnknownOlympus/olympus-protos/gen/go/scraper/olympus"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ScraperIface is an autogenerated mock type for the ScraperIface type
type ScraperIface struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: ctx, taskID, text
func (_m *ScraperIface) AddComment(ctx context.Context, taskID int64, text string) error {
	ret := _m.Called(ctx, taskID, text)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, taskID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAgreementsByID provides a mock function with given fields: ctx, id
func (_m *ScraperIface) GetAgreementsByID(ctx context.Context, id int64) ([]*olympus.Agreement, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementsByID")
	}

	var r0 []*olympus.Agreement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*olympus.Agreement, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*olympus.Agreement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*olympus.Agreement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgreementsByName provides a mock function with given fields: ctx, name
func (_m *ScraperIface) GetAgreementsByName(ctx context.Context, name string) ([]*olympus.Agreement, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementsByName")
	}

	var r0 []*olympus.Agreement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*olympus.Agreement, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*olympus.Agreement); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*olympus.Agreement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsFromTask provides a mock function with given fields: ctx, taskID
func (_m *ScraperIface) GetCommentsFromTask(ctx context.Context, taskID int64) ([]string, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsFromTask")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyTasks provides a mock function with given fields: ctx, date
func (_m *ScraperIface) GetDailyTasks(ctx context.Context, date time.Time) ([]*olympus.Task, string, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyTasks")
	}

	var r0 []*olympus.Task
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*olympus.Task, string, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*olympus.Task); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*olympus.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) string); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time) error); ok {
		r2 = rf(ctx, date)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEmployees provides a mock function with given fields: ctx
func (_m *ScraperIface) GetEmployees(ctx context.Context) ([]*olympus.Employee, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployees")
	}

	var r0 []*olympus.Employee
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*olympus.Employee, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*olympus.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*olympus.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTaskTypes provides a mock function with given fields: ctx
func (_m *ScraperIface) GetTaskTypes(ctx context.Context) ([]string, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskTypes")
	}

	var r0 []string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewScraperIface creates a new instance of ScraperIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScraperIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScraperIface {
	mock := &ScraperIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
